(defvar *window-list* nil)
(defvar *current-window-pos* '(0 . 0))

(defmacro window (text)
  `(let ((new-window (make-instance window)))
     (set-defaults new-window)
     (setf (slot new-window 'text) ,text)
     (setq *window-list* (append (list new-window) *window-list*))
     (setf (slot new-window 'x) (car *current-window-pos*))
     (setf (slot new-window 'y) (cdr *current-window-pos*))
     (setf (slot new-window 'width) (+ (slot new-window 'width) (string-size ,text)))
     (setq *current-window-pos* (cons (slot new-window 'width) (cdr *current-window-pos*)))
     new-window))

(defmacro screen (&rest windows)
  `(app '(lambda (w) (draw w)) *window-list*))
;(setq elem2 (make-element 0 0 3 2 "test" +blue+ +red+ +green+ nil nil 0 '(0 . 0) #(0 0 0 0)))
;(setq elem (make-window 5 5 0 10 "test12" +cyan+ +magenta+ +green+ nil nil 0 '(0 . 0) #(0 0 0 0)))
;(setq elem3 (make-element 0 0 3 2 "test" +green+ +yellow+ +green+ nil nil 0 '(0 . 0) #(0 0 0 0)))
;(setq elem4 (make-element 0 0 3 2 "test" +blue+ +dark-gray+ +green+ nil nil 0 '(0 . 0) #(0 0 0 0)))
;(setq elem5 (make-element 0 0 3 2 "test" +blue+ +light-green+ +green+ nil nil 0 '(0 . 0) #(0 0 0 0)))
;(set-defaults elem5)
;(set-defaults elem)
;(add-child elem elem2)
;(add-child elem elem3)
;(add-child elem elem4)
;(add-child elem elem5)
;(align elem4 'left)
;(align elem2 'center)
;(align elem3 'right)
;(draw elem)
;draw (window "test"))
(screen (window "test1"))
