Реализация файловой системы FAT-32
==================================

Класс Fat32FileSystem наследуется от FileSystem, реализуя методы:

* init - инициализация файловой системы;
* chdir' - смена рабочего пути, проверка пути;
* listdir' - просмотр каталога, проверка пути;
* fstat' - информация о файле;
* create-file' - создание файла;
* remove-file' - удаление файла;
* create-dir' - создание каталога;
* remove-dir' - удаление каталога;
* fopen' - создание файлового объекта.

Класс Fat32File наследуется от File, реализуя методы:

* fread;
* fwrite.

Устройство системы FAT32
------------------------
Структура FAT32:
::

   сектор - значение
   0 - Bios Parameter Block (BPB)
   1 - FSInfo
   2 - Резерв
   ...
   7 - Копия BPB
   ...
   xx - FAT1   адрес - BPB->ReservSecCount
               длина - BPB->FATSize32
   xx - FAT2 (копия)
   xx - Данные
   xx - Корневой каталог
        маркер 0xF8FFFF0F.FFFFFFFF
   Данные

Только область данных делится на блоки (кластеры).

Таблица размещения файлов FAT
-----------------------------

Каждый элемент(кластер) хранит значения:

:0x000 0000: кластер свободен
:0xfff fff7: кластер поврежден, не должен использоваться
:0xfff fff8: последний кластер в цепочке файла или каталога

Первые два кластера зарезервированы.

Заполнение таблицы идет последовательно от начала к концу. При создании нового файла или увеличении существующего ищется первый свободный кластер.

Всего записей столько, сколько кластеров на диске. Вторая копия полностью дублирует первую (изменения в первой, отражаются во второй).

Записи каталогов
----------------

Базовая запись 32 байта:

:1:  Первый символ имени файла ASCII, если 0xe5 - то файл удален, 0 - конец каталога, свободная запись
:10: Следующие 10 символов 7 + 3 (расширение) ASCII
:1:  Атрибуты
     5       4         3        2      1      0
     Archive Directory VolumeID System Hidden ReadOnly
:1:  Резерв
:1:  Десятые доли секунды времени создания
:2:  Часы/минуты/секунды времени создания
:2:  Дата создания
:2:  Дата последнего обращения
:2:  Старшие 2 байта ссылки на первый кластер
:2:  Часы, минуты, секунды времени модификации
:2:  Дата модификации
:2:  Младшие 2 байта ссылки на первый кластер
:4:  Размер файла

Запись с длинным именем предшествует базовой, отличается по смещению 11 - байт 0xf:

:1:  Порядковый номер или 0xe5 если файл удален
:10: Первые 5 символов имени файла в Unicode
:1:  0xf
:1:  Резерв
:1:  Контрольная сумма
:12: Следующие 6 символов имени файла
:2:  Резерв
:4:  Следующие 2 символа имени файла

 Неиспользуемые символы в имени файла хранят пробелы (не включая расширение - 3 символа).

Инициализация FAT32
-------------------
При инициализации загружается BPB, корневой каталог изначально - nil, загружается при первом обращении. Таблица FAT - nil.

Структуру каталогов удобно хранить в естественном виде дерева из файлов и каталогов. Это будет хеш-объект с ключами - имя и значениями в виде номера кластера каталога и порядкового номера или файловый объект или другой каталог. Изначально различаются только файлы и каталоги, устанавливается только порядковый номер. По мере открытия файлов, записи загружаются. Глобальный объект \*root-directory\*. Рабочий каталог -- \*working-directory\* является ссылкой на часть глобального.
::

   ; Корневой каталог
   (("File1.txt".<файловый объект>)  ; обычный файл, который уже открывался
    ("File2.txt". (<номер кластера каталога>.<порядковый номер>))  ; обычный файл с порядковым номером в каталоге
    ((dir "Directory 10").(("f1.txt" . (7.0))   ; раскрытый каталог
                           ("f2.txt" . (7.1))))
    ((dir "Directory") . (2.3))) ; нераскрытый каталог

Таблицу FAT удобно хранить как хеш-объект с ключом - номер первого кластера в цепочке и значением -- список кластеров:
::

   ((2.(2 3 4))
    (5.(5 6 7))
    (8. (8)))

Обновляется при необходимости. Ссылки на списки кластеров передаются в файловый объект.

Вспомогательные функции
-----------------------

Чтение кластера по номеру: (read-cluster 10)

Работа с путями
---------------

Необходима функция, которая по строке пути возвращает или nil (если путь неправильный) или пару (<номер кластера каталога>.<порядковый номер записи в каталоге>) или раскрытый каталог. По мере раскрытия пути читаются и добавляются в дерево другие каталоги. Если путь относительный то работа идет с рабочим каталогом.

Используя пару можно прочитать запись файла или каталога (2 разные функции).

Создание файла
--------------

Необходимо найти первый свободный элемент FAT и создать новую цепочку из одного элемента. Для обновления обеих копий FAT нужна функция с параметром - список кластеров.

Удаление файла
--------------

Необходимо обновить первый байт в записи каталога на 0xe5. Запись FAT обновляется, в номер первого кластера ставится 0.
