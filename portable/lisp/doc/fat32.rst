Реализация файловой системы FAT-32
==================================

Класс Fat32FileSystem наследуется от FileSystem, реализуя методы:

* init - инициализация файловой системы;
* fstat* - информация о файле;
* create-file* - обновление времени, создание новой записи каталога, на входе номер блока каталога, возвращает файловый-объект;
* remove-file* - удаление файла на диске;
* create-dir* - создание каталога на диске;
* remove-dir* - удаление каталога на диске;
* fopen* - создание файлового объекта;
* free-space* - получение информации о свободном месте;
* new-block - добавление нового блока для файла (для fwrite);
* new-file - создание новой записи каталога;
* load-dir - загрузка каталога по паре (<номер блока каталога>.<порядковый номер записи в каталоге>);
* load-file - загрузка файла по паре.

Класс Fat32File наследуется от File, реализуя методы:

* fread - обновление атрибутов;
* fwrite - обновление атрибутов.

Устройство системы FAT32
------------------------
Структура FAT32:
::

   сектор - значение
   0 - Bios Parameter Block (BPB)
   1 - FSInfo
   2 - Резерв
   ...
   7 - Копия BPB
   ...
   xx - FAT1   адрес - BPB->ReservSecCount
               длина - BPB->FATSize32
   xx - FAT2 (копия)
   xx - Данные
   xx - Корневой каталог
        маркер 0xF8FFFF0F.FFFFFFFF
   Данные

Только область данных делится на блоки (кластеры).

Таблица размещения файлов FAT
-----------------------------

Каждый элемент(кластер) хранит значения:

:0x000 0000: кластер свободен
:0xfff fff7: кластер поврежден, не должен использоваться
:0xfff fff8: последний кластер в цепочке файла или каталога

Первые два кластера зарезервированы.

Заполнение таблицы идет последовательно от начала к концу. При создании нового файла или увеличении существующего ищется первый свободный кластер.

Всего записей столько, сколько кластеров на диске. Вторая копия полностью дублирует первую (изменения в первой, отражаются во второй).

Записи каталогов
----------------

Базовая запись 32 байта:

:1:  Первый символ имени файла ASCII, если 0xe5 - то файл удален, 0 - конец каталога, свободная запись
:10: Следующие 10 символов 7 + 3 (расширение) ASCII
:1:  Атрибуты
     5       4         3        2      1      0
     Archive Directory VolumeID System Hidden ReadOnly
:1:  Резерв
:1:  Сотые доли секунды времени создания
:2:  Часы/минуты/секунды времени создания (5 бит/6 бит/ 5 бит)
:2:  Дата создания (Год 7 бит / Месяц 4 бита / День 5 бит)
:2:  Дата последнего обращения
:2:  Старшие 2 байта ссылки на первый кластер
:2:  Часы, минуты, секунды времени модификации
:2:  Дата модификации
:2:  Младшие 2 байта ссылки на первый кластер
:4:  Размер файла

Запись с длинным именем предшествует базовой, отличается по смещению 11 - байт 0xf:

:1:  Порядковый номер или 0xe5 если файл удален
:10: Первые 5 символов имени файла в Unicode
:1:  0xf
:1:  Резерв
:1:  Контрольная сумма
:12: Следующие 6 символов имени файла
:2:  Резерв
:4:  Следующие 2 символа имени файла

 Неиспользуемые символы в имени файла хранят пробелы (не включая расширение - 3 символа).

Структура FSInfo
----------------

Смещение 0x1E8 -- 4 байта сколько свободных кластеров, если 0xffff ffff - то значение должно быть вычислено.

Смещение 0x1EС -- 4 байта номер кластера, с которого должен начинаться поиск свободных кластеров.
 
Инициализация FAT32
-------------------
При инициализации загружается BPB, загружается корневой каталог. Таблица FAT - пустой хеш-объект. Из FSInfo читается \*free-cluster-count\* и \*last-free-cluster\*.

Таблицу FAT удобно хранить как хеш-объект с ключом - номер первого кластера в цепочке и значением -- список оставшихся кластеров:
::

   ((2.(3 4))
    (5.(6 7))
    (8. ()))

Обновляется при необходимости. Ссылки на списки кластеров передаются в файловый объект.

Вспомогательные функции
-----------------------

Чтение кластера по номеру: (block-read 10), запись кластера - block-write.

Пересчитать число свободных кластеров (update-free-clusters-count).

Пересчитать последний свободный кластер (update-last-free-cluster).

Загрузка каталога
-----------------
load-dir <номер блока> -- загружает каталог, используя структуру записи.

Получение информации о файле или каталоге
-----------------------------------------

Используя функцию load-path получаем пару (или ошибка). Загружаем файловый объект с помощью функции load-file, на входе пара. Файловый объект не записывается в дерево каталогов, потому что он может быть каталогом.


Создание файла - new-file
-------------------------

Создать новую запись в каталоге по номеру блока (update-dir-entry <пара> <структура записи>).

Для создания структуры используется make-dir-entry со всеми параметрами.

Необходимо найти первый свободный элемент FAT, используя информацию из FSInfo, обновить FSInfo, и создать новую цепочку из одного элемента.

Функция fat-find-free <стартовый блок> - найти свободный кластер.

Функция change-last-free-cluster <номер> - обновить последний свободный кластер на диске и в глобальной переменной \*last-free-cluster\*.

Функция change-free-clusters-count <дельта - число> - изменяет число свободных кластеров на заданный параметр.

Для обновления обеих копий FAT нужна функция (update-fat <номер кластера> <значение>).

Удаление файла
--------------

Необходимо обновить первый байт в записи каталога на 0xe5 (delete-file <пара>). Записи FAT обновляются, все кластеры файла ставятся в 0 (update-fat). Обновляется последний свободный кластер, если удаленные номера меньше имеющегося (change-last-free-cluster. Добавить число кластеров к числу свободный кластеров (change-free-clusters-count).

Создание каталога
-----------------

Тоже что и создание файла, только ставится атрибут каталога и кластер каталога заполняется нулями (write-block).

Удаление каталога
-----------------

Рекурсивно удаляем все файлы и каталоги, далее удаляем саму запись (delete-file).

Открытие файла
--------------

Проверка пути. Создание объекта Fat32File. Загрузка файлового объекта (load-file) и запись в дерево каталогов. Если уже есть объект, то используем его, устанавливаем позицию чтения/записи в 0.

Получение информации о свободном месте
--------------------------------------

Если переменная \*free-clusters-count\* равна nil, то нужно пересчитать число свободных кластеров (update-free-clusters-count). Вернуть размер в байтах.
