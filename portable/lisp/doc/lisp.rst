Описание языка Лисп
===================

Интерфейс
---------

После запуска интерпретатора появляется цикл REPL (read, eval, print loop):

* чтение выражения;
* вычисление значения выражения;
* печать результата вычислений;
* цикл продолжается сначала.

Условием остановки цикла является символ EOF (конец файла или потока ввода).

S-выражения
-----------

Выражением является или атом (последовательность букв и символов) или список из нуля или более выражений, которые разделены пустотами (пробелы или переводы строк) и заключены в круглые скобки.

Пример выражений:
::

   avr
   ()
   (a)
   (a b c)
   (a b (c) d)

Разновидностью атомов являются целые числа. Все остальные атомы называются символами.

Вычисление выражений
--------------------

Каждое правильное выражение имеет значение (возвращает значение).

Если выражение является числом, то оно возвращает само число.

Если выражение - список, то первый элемент списка - это оператор (функция), остальные - аргументы. При вычислении выражения сначала вычисляются аргументы, затем оператор (исключение составляют особые операторы, у которых другой порядок вычислений).

Примитивные операторы (функции)
-------------------------------

1. (quote x) (особый оператор) возвращает свой аргумент без вычисления. Сокращенная запись - 'x.
   ::

      > (quote a)
      A
      > 'a
      A
      > (quote (a b c))
      (A B C)

2. (atom x) если аргумент атом, то возвращает атом T (истина), иначе возвращает атом NIL эквивалентный пустому списку (), что означает ложь.
   ::

      > (atom 'a)
      T
      > (atom 10)
      T
      > (atom '(a b c))
      NIL
      > (atom '())
      T
      > (atom (atom 'a))
      T                 # функция внутри функции
      > (atom '(atom 'a))
      NIL           # цитирование отменяет вычисление, поэтому аргумент - список

3. (eq x y) возвращает T, если x и y - один и тот же атом (пустой список это тоже атом), иначе возвращает NIL.
   ::

      > (eq 'a 'a)
      T
      > (eq 'a 'b)
      NIL
      > (eq '() '())
      T

4. (car x) ожидает, что аргумент - список, возвращает первый элемент списка.
   ::

      > (car '(a b c))
      A

5. (cdr x) ожидает, что аргумент - список, возвращает все кроме первого элемента списка.
   ::

      > (cdr '(a b c))
      (B C)

6. (cons x y) ожидает, что аргумент y - список, возвращает список который содержит x, и продолжается с элементами y.
   ::

      > (cons 'a '(b c))
      (A B C)
      > (cons 'a (cons 'b (cons 'c '())))
      (A B C)
      > (cons '(a b) '(c d))
      ((A B) C D)

#. (cond (p1 e1) ... (pn en)) (особый оператор). Выражения p вычисляются до тех пор, пока не будет значение T. Как только такое выражение найдено, то возвращается значение соответствующего выражения e как результат всего выражения cond.
   ::

      > (cond ((eq 'a 'b) 'first)
              ((atom 'a) 'second))
      SECOND

Лямбда выражения
----------------

Лямбда выражение - это анонимная (без имени) функция (lambda (p1 ... pn) e), где
p1 ... pn - это параметры функции, e - выражение.

Вызов функции - это следующее выражение:
::

   ((lambda (p1 ... pn) e) a1 ... an)

Сначала вычисляются все аргументы a1 ... an. Затем каждому параметру p1 ... pn ставится в соответствие вычисленное значение аргументов a1 ... an. После этого вычисляется выражение e, содержащее параметры, вместо которых будут подставлены их значения.
::

   > ((lambda (x) (cons x '(b))) 'a)
   (A B)
   > ((lambda (x y) (cons x (cdr y)))
     'z
     '(a b c))
   (Z B C)

Определение функций
-------------------

Новую функцию можно создать с помощью оператора defun:
::

    > (defun null (x)
         (eq x NIL))
    NULL  # имя новой функции
    > (null 'a)
    NIL
    > (null '())
    T
