echo "------------SYSTEM TEST-------------------"
sh sys_test "\"\xFFF\"" "get_string: invalid symbol code"

echo "---Тесты PARSER ---"
#PARSER 2 Неправильный символ
sh sys_test "~" "ERROR: lexer.c: INVALID SYMBOL"
#PARSER 6 список без закрывающей скобки
sh sys_test "(a b c" "expected )"
#PARSER 8 пустой список без открывающей скобки
sh sys_test ")" ""
sh sys_test "((a b (1 2) e f)" "expected )" #10
sh sys_test "((a b #(1 #(2 (3 4) 5)) c d )" "expected )" #11
sh sys_test "#(1 #(2 3) 4)" "#(1 #(2 3) 4)" # 20

echo "---Тесты ATOM---"
sh sys_test "(atom 'a)" "T" # 2
sh sys_test "(atom 10)" "T" # 1
sh sys_test "(atom '(a b c))" "NIL" # 7
sh sys_test "(atom '())" "T" # 7
sh sys_test "(atom (atom 'a))" "T" # 7
sh sys_test "(atom '(atom 'a))" "NIL" # 7
sh sys_test "(atom )" "atom: no args" # 52 54
sh sys_test "(atom 'a 'd)" "atom: many args" # 131
sh sys_test "(atom \"abc\")" "T" # 3
sh sys_test "(atom #(1 2 3 4))" "T" # 4

echo "---Тесты QUOTE---"
sh sys_test "'a" "A" # 5 6
sh sys_test "'()" "NIL"
sh sys_test "(quote())" "NIL"
sh sys_test "(quote a b)" "quote: many args" #53

echo "---Тесты BACKQUOTE---"
sh sys_test "(setq y 3)
   	    	  \`(x ,y \`(a ,b))" "3
(X 3 (BACKQUOTE (A (COMMA B))))" # 25 26 27
sh sys_test "(setq abc '(a b c))
(setq a 9)
\`(1 (comma-at abc) ((comma a)) \"a\" #(1 (comma a) 2))" "(A B C)
9
(1 A B C (9) \"a\" #(1 9 2))" # 25 26 27

echo "---Тесты cdr ---"
sh sys_test "(cdr '(a b c))" "(B C)" #11
sh sys_test "(cdr \"dsfsd\")" "Not list in cdr" #61
sh sys_test "(cdr)" "cdr: No args" #62
sh sys_test  "(cdr '(a b c) '(d e f))" "cdr: Too many args" #63 

sh sys_test "((lambda (x y) (cons x y)) 1 '(2))" "(1 2)" # 14 125
sh sys_test "(defun null (x) (eq x (quote())))\
(null 'a) (null (quote ())) (null '())" "NULL
NIL
T
T" # 18
sh sys_test "(defun f(x)\
         (cond \
            ((= x 1) 1) \
            (T (* x (f (- x 1))))))\
         (f 8) (f 3) (f 8) (f 9) (f 10) (f 10)" "F
40320
6
40320
362880
3628800
3628800" # 18
sh sys_test "(defun f(x)\
         (cond \
            ((= x 1) 1) \
            (T (* x (f (- x 1))))))\
         (f 11) (f 11) (f 11) (f 10) (f 11)" "F
39916800
39916800
39916800
3628800
39916800" # 18
# обработка отрицательного числа
sh sys_test "-143" "-143"
# обработка строки со знаком "-"
sh sys_test "\"-test\"" "\"-test\""
sh sys_test "(+ 1 2 3 4)" "10"
sh sys_test "(1" "expected )"
sh sys_test "(+ 1 2 3 5)" "11"
sh sys_test "(- 9 5 1 1)" "2"
sh sys_test "(* 1 2 3 5)" "30"
sh sys_test "(progn (+ 2 3) (* 3 4))" "12"
sh sys_test "(defun test (x) (+ x 10) (* x 20)) (test 5)" "TEST
100" # 18
sh sys_test "(defvar a 10) (A)A" "A
Unknown func: A
10" # 23 24
sh sys_test "(defvar a 10) A" "A
10" # 23 24
sh sys_test "T NIL" "T
NIL"
sh sys_test "(defvar +bgr-index+ 0x1ce) \
(defvar +bgr-data+ 0x1cf) +BGR-INDEX+ +BGR-DATA+ X ABC" "+BGR-INDEX+
+BGR-DATA+
462
463
Unknown SYMBOL: X
Unknown SYMBOL: ABC" # 23
sh sys_test "\"a b c d\"" "\"a b c d\""
sh sys_test "(defun f(x)\
             \"factorial f(x)\"\
         (cond \
            ((= x 1) 1) \
            (T (* x (f (- x 1))))))\
         (f 12) (f 10)" "F
479001600
3628800" # 18
sh sys_test "(setq test 200) test" "200
200" # 25 26 
sh sys_test "(defun bgr-out (reg data)\
  \"Запись регистра видео\"\
  (+ 0 reg)\
  (+ 1 data))\
\
(defun bgr-set-res (width height depth)\
  \"Установка разрешения экрана\"\
  (bgr-out 3 0)\
  (bgr-out 4 width)\
  (bgr-out 1 height)\
  (bgr-out 5 depth)\
  (bgr-out 3 1))\
\
(bgr-set-res 320 200 8)\
\
(defun graph-send-buffer (a) nil)\
\
(graph-send-buffer \"1234567890q\" )" "BGR-OUT
BGR-SET-RES
2
GRAPH-SEND-BUFFER
NIL" # 18
sh sys_test "(defvar str  \"1234567890111111qwertyu\\nuiop111\\n1111111111111111\\nqqqqqqqqqqqqqqqqqqqq\\nqqqqqqqqqqqqqqqqqqqqq\\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\") str" "STR
\"1234567890111111qwertyu
uiop111
1111111111111111
qqqqqqqqqqqqqqqqqqqq
qqqqqqqqqqqqqqqqqqqqq
wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\"" # 23
sh sys_test "(setq a 1 b 2 c 3)a b c" "3
1
2
3" # 25 26 27
sh sys_test "(setq a 1 b)" "setq: no value" # 25 27 87
sh sys_test "(defvar a #(1 2 3)) a" "A
#(1 2 3)" # 23 24 
sh sys_test "(defvar a #(1 #(a b c) 2 3)) a" "A
#(1 #(A B C) 2 3)" # 23 24
sh sys_test "\`(1 2 3 4)" "(1 2 3 4)"
sh sys_test "\`(A B C D 1 2 3 4)" "(A B C D 1 2 3 4)"
sh sys_test "\`((1) 2 3 (A B) (C ABC)  4)" "((1) 2 3 (A B) (C ABC) 4)"
sh sys_test "\`a" "A"
sh sys_test "\`(\"abcdefg\")" "(\"abcdefg\")"
sh sys_test "\`#(1 2 3 4)" "#(1 2 3 4)"
sh sys_test "\`(#(1 2 (3) 4 b #(b c)) a (1) \"ab\")" "(#(1 2 (3) 4 B #(B C)) A (1) \"ab\")"
sh sys_test "(setq_rec a 1 b)" "Unknown SYMBOL: AError in args: (SETQ_REC A 1 B)
"
sh sys_test "(defvar x 1) \`(a ,x 2)" "X
(A 1 2)" # 23 24
sh sys_test "(defvar x 1) (defvar y \`(,x a b)) \`(a ,x 2 ,y)" "X
Y
(A 1 2 (1 A B))" # 23 24
sh sys_test "(defvar x 1) \`(a ,x (,x #(,x)) 2)" "X
(A 1 (1 #(1)) 2)" # 23 24
sh sys_test "(defvar a '(1 2 3 (4 5))) \`(b ,@a c)" "A
(B 1 2 3 (4 5) C)" # 23 24
sh sys_test "(defmacro macro (x) 
                 \`(+ ,x 1))
             (defvar a 4)
             (macro a)" "MACRO
A
5" # 41 23 24
sh sys_test "(defmacro if (test true false) 
                 \`(cond (,test ,true)
                         (t ,false)))
             (defvar a 4)
             (if (= a 4) 
                 (+ a 1)
                 (- a 1))" "IF
A
5" # 41 23 24
sh sys_test "(defmacro macro (x) 
                 \`(+ ,x 1)\`(* ,x 2))
             (defvar a 4)
             (macro a)" "MACRO
A
8" # 41 23 24
sh sys_test "(concat \"for-\" (symbol-name 'var))" "\"for-VAR\"" # 28 29
sh sys_test "\`(,(concat \"for-\" (symbol-name 'var)))" "(\"for-VAR\")" # 28 29
sh sys_test "
(defvar x 10)
(defun change-local-x (x)
(setq x 5) x) 
(change-local-x x) 
x" "X
CHANGE-LOCAL-X
5
10" # 23 24 18 26 27
sh sys_test "
(defmacro inner-for (name var start end body)
	  \`(defun ,name (,var)
                           (cond ((= ,var ,end) 'end)
			   	 (t (progn ,body 
                                           (,name (+ ,var 1))))))
			\`(,name ,start))

(defmacro for (var start end body)
  \`(inner-for ,(intern (concat \"for-\" (symbol-name var))) ,var ,start ,end ,body))

(defvar arr (make-array 3))
(defvar arr2 (make-array 12))
(for row 0 3
     (progn
	(defvar a (make-array 3))
	(for col 0 3
	     (seta a col row))		
	(seta arr row a)))
	arr
(for y 0 4
     (for x 0 3
     	  (seta arr2 
	  	(+ (* y 3) x) 
		(+ (* y 3) x))))
arr2
" "INNER-FOR
FOR
ARR
ARR2
END
#(#(0 0 0) #(1 1 1) #(2 2 2))
END
#(0 1 2 3 4 5 6 7 8 9 10 11)" # 41 18 35 36 37 33 23 24

echo "---Тесты точечных пар----"
sh sys_test "'(4 . 5)" "(4 . 5)"
sh sys_test "'(4.(3.(5.())))" "(4 3 5)"
sh sys_test "'(4.5"  "expected )"

echo "---Тесты OR----"
# случай TRUE
sh sys_test "(or(= 1 2) (= 2 2))" "T"
# случай FALSE
sh sys_test "(or(= 1 3) (= 1 4))" "NIL"
# один аргумент
sh sys_test "(or(= 1 3))" "NIL"
# без аргементов
sh sys_test "(or)" "or: no params"
# неверный аргумент
sh sys_test "(or (+ 1 2))" "or: invalid param"
# проверка на невычисление аргумента
sh sys_test "(or t (+ 1 2))" "T"


echo "---Тесты AND----"
# случай TRUE
sh sys_test "(and(= 2 2) (= 2 2))" "T"
# случай FALSE
sh sys_test "(and(= 1 3) (= 1 1))" "NIL"
# один аргумент
sh sys_test "(and(= 1 3))" "NIL"
# без аргементов
sh sys_test "(and)" "and: no params"
# неверный аргумент
sh sys_test "(and (+ 1 2))" "and: invalid param"
# проверка на невычисление аргумента
sh sys_test "(and nil (+ 1 2))" "NIL"

echo "---Тесты EQ----"
#случай число FALSE
sh sys_test "(eq 1 1)" "NIL"
#случай символ TRUE
sh sys_test "(eq 'a 'a)" "T"
#случай символ FALSE
sh sys_test "(eq 'a 'b)" "NIL" # 9
#случай отстутствие аргументов
sh sys_test "(eq)" "eq: no args" # 55
#случай больше двух аргументов 
sh sys_test "(eq 1 2 3)" "eq: too many args" # 56
#случай  1 аргумент
sh sys_test "(eq 'g)" ""  # 57

echo "---Тесты EQUAL----"
# случай число TRUE
sh sys_test "(equal 1 1)" "T"
# случай символ TRUE
sh sys_test "(equal 'v 'v)" "T"
# случай число FALSE
sh sys_test "(equal 3 1)" "NIL"
# случай символ FALSE
sh sys_test "(equal 'c 'x)" "NIL"
# случай строки TRUE
sh sys_test "(equal \"vvv\" \"vvv\")" "T"
# случай строки FALSE
sh sys_test "(equal \"vbv\" \"vvv\")" "NIL"
# случай списка TRUE
sh sys_test "(equal '(a b c) '(a b c))" "T"
sh sys_test "(equal '(a (b (c))) '(a (b (c))))" "T"
# случай списка FALSE
sh sys_test "(equal '(a 1 c) '(a b c))" "NIL"
sh sys_test "(equal '(a c) '(a b c))" "NIL"
sh sys_test "(equal '(a c c) '(a b))" "NIL"
sh sys_test "(equal #(1 2 a) #(1 2 a))" "T"
sh sys_test "(equal #(1 2 a) #(1 b a))" "NIL"
# ошибка - нет аргументов
sh sys_test "(equal)" "equal: no arguments
"
# ошибка - нет второго аргумента
sh sys_test "(equal 1)" "equal: no second argument
"
# ошибка - более двух аргументов
sh sys_test "(equal 1 2 3)" "equal: too many arguments
"

echo "---Тесты INTERN---"
#аргумент строка
sh sys_test "(intern \"F\")" "F" #30
# отсутствие аргументов
sh sys_test "(intern )" "intern: no arguments
" #91
# аргумент не строка
sh sys_test "(intern 1)" "intern: not string in params
" #92
# больше одного аргумента
sh sys_test "(intern 'a 'd)" "intern: not string in params
" #93

echo  "---Тесты SETA---"
# три аргумента
sh sys_test "(seta #(1 2 3 4) 0 10)" "#(10 2 3 4)"  #35
# второй аргумент число 
sh sys_test "(seta #(1 2 3 4) 0 10)" "#(10 2 3 4)"  #36
# первый аргумент объект массив 
sh sys_test "(seta #(1 2 3 4) 0 10)" "#(10 2 3 4)"  #37
# отсутствие аргументов
sh sys_test "(seta  )" "seta: invalid arguments" #99
# >3 аргументов
sh sys_test "(seta #(1 2 3 4) 1 2 4)" "#(1 2 3 4)" #100
# <3 аргументов
sh sys_test "(seta #(1 2 3 4))" "seta: invalid arguments" #101
# второй аргумент не число
sh sys_test "(seta #(1 2 3 4) 'd 10)" "seta: index out of range" #102
# первый аргумент не объект массив
sh sys_test "(seta 2 1)" "" #103

echo  "---Тесты AREF---"
# два аргумента
sh sys_test "(aref #(1 2 3 4) 1)" 2  #38
# первый аргумент объект массив
sh sys_test "(aref #(1 2 3 4) 1)" 2  #39
# второй аргумент число 
sh sys_test "(aref #(1 2 3 4) 1)" 2  #40
# отсутствие аргументов
sh sys_test "(aref  )" "aref: invalid arguments" #104
# >2 аргументов
sh sys_test "(aref #(1 2 3 4) 1 2 )" 2 #105
# <2 аргументов
sh sys_test "(aref #(1 2 3 4))" "aref: invalid arguments" #106
# второй аргумент не число
sh sys_test "(aref #(1 2 3 4) 'd)" "aref: index should be a number" #107
# первый аргумент не объект массив
sh sys_test "(aref 2 1)" "aref: index out of range" #108

echo "---Тесты FUNCALL---"
# аргумент - ламбда-функция
sh sys_test "(funcall '(lambda (x) (+ x 1)) 2)" "3" # 14 125
# аргумент - встроенная функция "+"
sh sys_test "(funcall '+ 1 2 3 4 5)" "15"
# аргумент - встроенная функция "car"
sh sys_test "(funcall 'car '(a b c))" "A" # 10
# аргумент - пользовательская функция
sh sys_test "(defun tfun (x y) (* (+ x 1) y))
(funcall 'tfun 2 3)" "TFUN
9" # 18
# аргумент отсутствует
sh sys_test "(funcall)" "funcall: no arguments"
# неправильный аргумент - пустой список
sh sys_test "(funcall ())" "funcall: invalid func"
# неправильный аргумент - число
sh sys_test "(funcall 1)" "funcall: invalid func"
# неправильный аргумент - nil
sh sys_test "(funcall nil)" "funcall: invalid func"
# ошибка - аргументов больше параметров
sh sys_test "(defun tfun (x y) (+ x y))
(funcall 'tfun 2 3 4)" "TFUN
Invalid number of arguments"
# ошибка - параметров больше аргументов
sh sys_test "(defun tfun (x y) (+ x y))
(funcall 'tfun 2)" "TFUN
Not enough values for params"
# объединение остаточных параметров в список, используя &rest
sh sys_test "(defun test (a &rest b) b)
(funcall 'test 1 2 3 4)" "TEST
(2 3 4)" # 18
# ошибка - отсутсвует параметр после &rest
sh sys_test "(defun test (a &rest) b)
(funcall 'test 1 2 3 4)" "TEST
Missing parameter after &rest" # 18
# ошибка - лишний параметр после &rest b
sh sys_test "(defun test (a &rest b c) b)
(funcall 'test 1 2 3 4)" "TEST
Too many parameters after &rest" # 18

echo "---Тесты MACROEXPAND---"
# нормальный вызов
sh sys_test "(defmacro if (test true false) 
                 \`(cond (,test ,true)
                         (t ,false)))
(macroexpand '(if (= 1 1) 2 3))" "IF
(COND ((= 1 1) 2) (T 3))" # 41
# без параметров
sh sys_test "(macroexpand)" "macroexpand: no params"
# неверный параметр
sh sys_test "(macroexpand 2)" "macroexpand: invalid macro call"
# лишний параметр
sh sys_test "(defmacro if (test true false) 
                 \`(cond (,test ,true)
                         (t ,false)))
(macroexpand '(if (= 1 1) 2 3) 4)" "IF
macroexpand: many params" # 41
# не макрос
sh sys_test "(macroexpand '(+ 1 1))" "macroexpand: invalid macro"
# ошибка в макросе
sh sys_test "(defmacro if (test true false) 
                 \`(cond (,test ,true)
                         (t ,false)))
(macroexpand '(if (= 1 1)))" "IF
Not enough values for params" # 113

echo "---Тесты PREDICATES---"
# тест функции symbolp без параметров
sh sys_test "(symbolp)" "SYMBOLP: no params"
# тест функции с неверным параметром
sh sys_test "(symbolp 1)" "NIL"
# тест функции с верным параметром
sh sys_test "(symbolp 'a)" "T"
# тест с двумя параметрами
sh sys_test "(symbolp 'a 'b)" "SYMBOLP: many params"

echo "---Тесты LIST---"
sh sys_test "(list)" "NIL"
sh sys_test "(list 1 2 3)" "(1 2 3)"
sh sys_test "(list 'a 'b '(1 2 3))" "(A B (1 2 3))"
